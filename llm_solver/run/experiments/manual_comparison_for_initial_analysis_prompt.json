{
  "Merge Sorted Array": {
    "v2": {
      "explanation": "In this question, we are asked to merge two sorted arrays, nums1 and nums2, into a single sorted array. The result should be stored in nums1, which has extra space at the end to accommodate the merged result. The challenge is to perform this merge in-place without using additional space.",
      "examples": [
        {
          "Example 1": "We have nums1=[1,2,3,0,0,0] and nums2=[2,5,6]. We compare elements from both arrays starting from the end and place the larger element at the end of nums1. We continue this process, moving from right to left, until all elements are merged."
        },
        {
          "Example 2": "With nums1=[1] and nums2=[], no merging is needed as nums2 is empty."
        },
        {
          "Example 3": "Here, nums1=[0] (m=0) and nums2=[1]. Since nums1 is effectively empty, we simply copy the element from nums2 into nums1."
        }
      ],
      "best_achievable_runtime": "O(m+n)",
      "best_achievable_memory": "O(1)"
    },
    "v1": {
      "explanation": "In this question, we are asked to merge two sorted arrays, nums1 and nums2, into a single sorted array. The merged result should be stored in nums1, which has extra space at the end to accommodate the elements from nums2. The challenge is to perform this merge in-place, without using additional space.",
      "examples": [
        {
          "Example 1": "In this example, we have nums1 = [1,2,3,0,0,0] with m = 3 (indicating 3 valid elements) and nums2 = [2,5,6] with n = 3. We start comparing elements from the end of both arrays and place the larger element at the end of nums1. We continue this process, moving from right to left, until all elements are placed correctly. The result is [1,2,2,3,5,6]."
        },
        {
          "Example 2": "Here, nums1 = [1] with m = 1 and nums2 = [] with n = 0. Since nums2 is empty, no merging is needed, and the output remains [1]."
        },
        {
          "Example 3": "In this case, nums1 = [0] with m = 0 (indicating no valid elements) and nums2 = [1] with n = 1. We simply need to copy the element from nums2 to nums1, resulting in [1]."
        }
      ],
      "best_achievable_runtime": "O(m+n)",
      "best_achievable_memory": "O(1)"
    }
  },
  "Remove Duplicates from Sorted Array": {
    "v2": {
      "explanation": "In this question, we are asked to remove duplicates from a sorted array such that each unique element appears at most twice. We need to modify the array in-place and return the number of elements after removing excess duplicates. The relative order of elements should be maintained, and the solution should use O(1) extra memory.",
      "examples": [
        {
          "Example 1": "In this example, we get [1,1,1,2,2,3]. We keep two 1s and two 2s, removing the third 1. The result is [1,1,2,2,3], and we return 5 as the length."
        },
        {
          "Example 2": "In this example, we get [0,0,1,1,1,1,2,3,3]. We keep two 0s, two 1s, one 2, and two 3s, removing two 1s. The result is [0,0,1,1,2,3,3], and we return 7 as the length."
        }
      ],
      "best_achievable_runtime": "O(N)",
      "best_achievable_memory": "O(1)"
    },
    "v1": {
      "explanation": "In this question, we are asked to remove duplicates from a sorted array such that each unique element appears at most twice. We need to modify the array in-place and return the number of elements after removing the duplicates. The key points are:\\n  1. The array is already sorted in non-decreasing order.\\n  2. We need to keep at most two occurrences of each unique element.\\n  3. The relative order of the elements should be maintained.\\n  4. We must modify the array in-place without using extra space.\\n  5. The solution should have O(1) extra memory complexity.",
      "examples": [
        {
          "Example 1": "In this example, we start with [1,1,1,2,2,3]. We keep the first two 1's, remove the third 1, keep both 2's, and keep the 3. The result is [1,1,2,2,3], with a length of 5. The last element doesn't matter, so it's represented as an underscore."
        },
        {
          "Example 2": "For [0,0,1,1,1,1,2,3,3], we keep two 0's, two 1's, one 2, and two 3's. The result is [0,0,1,1,2,3,3] with a length of 7. The last two elements don't matter, so they're represented as underscores."
        }
      ],
      "best_achievable_runtime": "O(N)",
      "best_achievable_memory": "O(1)"
    }
  }
}